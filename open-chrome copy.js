const { Builder, By, until } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');

// ‚úÖ ƒêƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ driver
async function loginToWebsite(email, password) {
  const driver = await new Builder().forBrowser('chrome').setChromeOptions(new chrome.Options()).build();

  try {
    await driver.get('https://cms.gmv.vn/admin/sessions/create');
    const emailInput = await driver.wait(until.elementLocated(By.name('email')), 10000);
    await emailInput.sendKeys(email);

    const passwordInput = await driver.wait(until.elementLocated(By.name('password')), 10000);
    await passwordInput.sendKeys(password);

    const loginButton = await driver.wait(until.elementLocated(By.xpath("//button[.//span[text()='ƒêƒÉng nh·∫≠p']]")), 10000);
    await loginButton.click();

    console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng.');
    await driver.sleep(1000);
    return driver;
  } catch (err) {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', err);
    await driver.quit();
  }
}

// ‚úÖ Ch·ªçn ƒë∆°n h√†ng theo m√£
async function selectOrder(driver, orderId) {
  try {
    const inputWrapper = await driver.wait(until.elementLocated(By.css('.el-input__wrapper')), 10000);
    await inputWrapper.click();

    const inputField = await driver.wait(until.elementLocated(By.css('.el-input__inner')), 10000);
    await inputField.clear();
    await inputField.sendKeys(orderId);

    await driver.sleep(2000);

    const matchedItem = await driver.wait(
      until.elementLocated(By.xpath(`//li[contains(@class,'el-select-dropdown__item')]//div[contains(text(), '${orderId}')]`)),
      10000
    );
    await matchedItem.click();
    console.log(`‚úÖ ƒê√£ ch·ªçn ƒë∆°n h√†ng: ${orderId}`);
  } catch (err) {
    console.error(`‚ùå L·ªói ch·ªçn ƒë∆°n h√†ng ${orderId}:`, err);
  }
}

// ‚úÖ ƒêi·ªÅn th·ªùi gian b·∫Øt ƒë·∫ßu / k·∫øt th√∫c
async function fillStartEndTime(driver, startTime, endTime) {
  try {
    const startInput = await driver.wait(until.elementLocated(By.xpath("//input[@placeholder='Ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu ']")), 10000);
    await startInput.click();
    await startInput.clear();
    await startInput.sendKeys(startTime);
    console.log(`‚úÖ B·∫Øt ƒë·∫ßu: ${startTime}`);

    const endInput = await driver.wait(until.elementLocated(By.xpath("//input[@placeholder='Ch·ªçn th·ªùi gian k·∫øt th√∫c ']")), 10000);
    await endInput.click();
    await endInput.clear();
    await endInput.sendKeys(endTime);
    console.log(`‚úÖ K·∫øt th√∫c: ${endTime}`);
  } catch (err) {
    console.error('‚ùå L·ªói th·ªùi gian:', err);
  }
}

// ‚úÖ ƒêi·ªÅn ghi ch√∫
async function fillNote(driver, note) {
  if (!note) return;
  try {
    const noteArea = await driver.wait(until.elementLocated(By.xpath("//textarea[@placeholder='Note phi√™n live']")), 10000);
    await noteArea.clear();
    await noteArea.sendKeys(note);
    console.log(`‚úÖ Ghi ch√∫: ${note}`);
  } catch (err) {
    console.error('‚ùå L·ªói ghi ch√∫:', err);
  }
}

// ‚úÖ Ch·ªçn hub live
async function fillHublive(driver) {
  try {
    const wrapper = await driver.wait(
      until.elementLocated(By.xpath("//input[@placeholder='Ch·ªçn Hublive']/ancestor::div[contains(@class,'el-input__wrapper')]")),
      10000
    );
    await wrapper.click();
    await driver.sleep(1000);

    const hubOption = await driver.wait(
      until.elementLocated(By.xpath("//li[contains(@class, 'el-select-dropdown__item')]//span[contains(text(), 'Hub H√† N·ªôi')]")),
      10000
    );
    await hubOption.click();
    console.log(`‚úÖ ƒê√£ ch·ªçn Hub H√† N·ªôi`);
  } catch (err) {
    console.error('‚ùå L·ªói ch·ªçn hub live:', err);
  }
}

// ‚úÖ Ch·ªçn ph·ª• live (assistant)
async function selectAssistant(driver, assistant) {
  try {
    const wrapper = await driver.wait(
      until.elementLocated(By.xpath("//input[@placeholder='Ch·ªçn ph·ª• live']/ancestor::div[contains(@class, 'el-input__wrapper')]")),
      10000
    );
    await wrapper.click();

    const dynamicInput = await driver.wait(until.elementLocated(By.css("input.el-select__input")), 5000);
    await dynamicInput.sendKeys(assistant);

    await driver.sleep(1000);

    const email = 'tvdtazan112@gmail.com';

const emailDiv = await driver.wait(
  until.elementLocated(
    By.xpath(`//div[@class='description' and text()='${email}']`)
  ),
  10000
);

await driver.executeScript("arguments[0].scrollIntoView(true);", emailDiv); // ƒë·∫£m b·∫£o th·∫•y ƒë∆∞·ª£c
await emailDiv.click();

console.log(`‚úÖ ƒê√£ click v√†o email: ${email}`);



    console.log(`‚úÖ ƒê√£ ch·ªçn tr·ª£ live: ${assistant}`);
  } catch (err) {
    console.error('‚ùå L·ªói ch·ªçn tr·ª£ live:', err);
  }
}

// ‚úÖ Ch·ªçn main host
async function selectMainHost(driver, mainHost) {
  try {
    const normalize = str => str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();

    const searchInput = await driver.wait(
      until.elementLocated(By.xpath("//input[@placeholder='T√¨m ki·∫øm streamer']")),
      5000
    );

    await searchInput.click();
    await searchInput.clear();
    await searchInput.sendKeys(mainHost);

    // ƒê·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán
    await driver.sleep(2000);

    // Ch·ªù cho c√°c streamer ƒë∆∞·ª£c render (√≠t nh·∫•t 1 item c√≥ class c·ª• th·ªÉ)
    await driver.wait(
      until.elementLocated(By.css(".py-3.px-4.flex.gap-2.cursor-pointer")),
      5000
    );

    const hostCards = await driver.findElements(By.css(".py-3.px-4.flex.gap-2.cursor-pointer"));

    for (const card of hostCards) {
      const nameElement = await card.findElement(By.css("h5.text-sm.font-semibold"));
      const nameText = await nameElement.getText();

      if (normalize(nameText).includes(normalize(mainHost))) {
        await driver.executeScript("arguments[0].scrollIntoView(true);", card);
        await card.click();
        console.log(`‚úÖ ƒê√£ ch·ªçn host kh·ªõp: ${nameText}`);
        return;
      }
    }

    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y host kh·ªõp.");
  } catch (err) {
    console.error(`‚ùå L·ªói khi ch·ªçn main host '${mainHost}':`, err);
  }
}




// ‚úÖ Ch·ªçn room
async function clickLiveRoom(driver, roomName) {
  try {
    await driver.executeScript(`
      const roomName = arguments[0];
      const radios = document.querySelectorAll('label.el-radio');

      radios.forEach(label => {
        if (label.textContent.trim().includes(roomName)) {
          const input = label.querySelector('input[type="radio"]');
          if (input) {
            input.click();
            // Dispatch change event n·∫øu c·∫ßn cho Vue/React
            input.dispatchEvent(new Event('change', { bubbles: true }));
          }
        }
      });
    `, roomName); // üëà Truy·ªÅn roomName v√†o ƒë√¢y

    console.log(`‚úÖ ƒê√£ ch·ªçn ph√≤ng: ${roomName}`);
  } catch (err) {
    console.error(`‚ùå Kh√¥ng click ƒë∆∞·ª£c ph√≤ng '${roomName}':`, err);
  }
}






// ‚úÖ G·ªôp t·∫°o session
async function createSession(driver, session) {
  const { orderId, startTime, endTime, note, mainHost, assistant, roomName } = session;
  await selectOrder(driver, orderId);
  await fillStartEndTime(driver, startTime, endTime);
  await fillNote(driver, 'Vi·ªát Ho√†ng');
  await fillHublive(driver);
  await selectAssistant(driver, assistant);
  await selectMainHost(driver, mainHost);
  await clickLiveRoom(driver, roomName);

}

// ‚úÖ M·ªói phi√™n trong tab m·ªõi
async function createSessionInNewTab(driver, session) {
  try {
    await driver.executeScript("window.open('about:blank', '_blank');");
    const handles = await driver.getAllWindowHandles();
    const newTab = handles[handles.length - 1];
    await driver.switchTo().window(newTab);
    await driver.get('https://cms.gmv.vn/admin/sessions/create');

    await createSession(driver, session);
  } catch (err) {
    console.error('‚ùå L·ªói t·∫°o phi√™n ·ªü tab m·ªõi:', err);
  }
}

// ‚úÖ Danh s√°ch phi√™n c·∫ßn t·∫°o
const sessionList = [
  { orderId: 'Anzani', startTime: '21:00 30/06/2025', endTime: '23:00 30/06/2025', note: 'Tiktok', mainHost: 'Nguy·ªÖn Th·∫ø Ti·∫øn', assistant: 'Kh√¥ng c√≥', roomName: 'P KT c≈©' },
  { orderId: '100625CPMZ', startTime: '8:00 30/06/2025', endTime: '10:00 30/06/2025', note: 'Tiktok', mainHost: 'Nguy·ªÖn H·ªìng H√≤a', assistant: 'Th·∫£o', roomName: 'Ph√≤ng Vip 1' },
  { orderId: '100625CPMZ', startTime: '10:01 30/06/2025', endTime: '12:01 30/06/2025', note: 'Tiktok', mainHost: 'Nguy·ªÖn Thu Hi·ªÅn', assistant: 'Trinh', roomName: 'Ph√≤ng Vip 1' },
  { orderId: '100625CPMZ', startTime: '12:02 30/06/2025', endTime: '14:02 30/06/2025', note: 'Tiktok', mainHost: 'Nguy·ªÖn H·ªìng H√≤a', assistant: 'Quy√™n', roomName: 'Ph√≤ng Vip 1' },
  { orderId: '100625CPMZ', startTime: '14:03 30/06/2025', endTime: '16:03 30/06/2025', note: 'Tiktok', mainHost: 'L√™ Th·ªã Lan H∆∞∆°ng', assistant: 'Quy√™n', roomName: 'Ph√≤ng Vip 1' },
  { orderId: 'qu·∫ßn', startTime: '9:00 30/06/2025', endTime: '11:00 30/06/2025', note: 'Tiktok', mainHost: 'Tr∆∞∆°ng Hu·ªá Trinh', assistant: 'Kh√¥ng c√≥', roomName: 'Ph√≤ng live 14' },
  { orderId: 'qu·∫ßn', startTime: '20:00 30/06/2025', endTime: '22:00 30/06/2025', note: 'Tiktok', mainHost: 'Ma th·ªã H√†', assistant: 'Kh√¥ng c√≥', roomName: 'Ph√≤ng live 14' },
  { orderId: '200625QNXC', startTime: '15:00 30/06/2025', endTime: '17:00 30/06/2025', note: 'Tiktok', mainHost: 'Tr·∫ßn Th·ªã Thanh B√¨nh', assistant: 'L·∫•y th√™m s√≤ m√°t m√°y', roomName: 'Ph√≤ng live 30' },
  { orderId: '200625QNXC', startTime: '17:00 30/06/2025', endTime: '19:00 30/06/2025', note: 'Tiktok', mainHost: 'N√¥ng H·ªìng H·∫£i', assistant: 'L·∫•y th√™m s√≤ m√°t m√°y', roomName: 'Ph√≤ng live 30' },
  { orderId: '200625QNXC', startTime: '19:00 30/06/2025', endTime: '21:00 30/06/2025', note: 'Tiktok', mainHost: 'D∆∞∆°ng Th·ªã Th∆°m', assistant: 'Kh√¥ng c√≥', roomName: 'Ph√≤ng live 30' },
  { orderId: '200625QNXC', startTime: '21:00 30/06/2025', endTime: '23:00 30/06/2025', note: 'Tiktok', mainHost: 'N√¥ng H·ªìng H·∫£i', assistant: 'Kh√¥ng c√≥', roomName: 'Ph√≤ng live 30' },
  { orderId: '270525REAX', startTime: '9:00 30/06/2025', endTime: '11:00 30/06/2025', note: 'Tiktok', mainHost: 'ƒê·∫∑ng thu Hi·ªÅn', assistant: 'm√°y 26 live ƒë√∫ng m√°y', roomName: 'Ph√≤ng live 6' },
  { orderId: '270525REAX', startTime: '20:00 30/06/2025', endTime: '22:00 30/06/2025', note: 'Tiktok', mainHost: 'D∆∞∆°ng Th·ªã H·ªìng Nhung', assistant: 'm√°y 3', roomName: 'Ph√≤ng live 6' },
  { orderId: '130625OVKU', startTime: '20:00 30/06/2025', endTime: '22:00 30/06/2025', note: 'Tiktok', mainHost: 'Ph·∫°m thu Th·∫£o', assistant: '√°o 3 l·ªó', roomName: 'Ph√≤ng live 13' },
  { orderId: '160625SDZE', startTime: '14:00 30/06/2025', endTime: '16:00 30/06/2025', note: 'Tiktok', mainHost: 'Ng√¥ Ng·ªçc Mai', assistant: 'Kh√¥ng c√≥', roomName: 'Ph√≤ng live 15' },
  { orderId: 'Hippy', startTime: '12:00 30/06/2025', endTime: '14:00 30/06/2025', note: 'Tiktok', mainHost: 'ƒê·∫∑ng thu Hi·ªÅn', assistant: 'Kh√¥ng c√≥', roomName: 'Ph√≤ng live 13' },
  { orderId: 'DDraco', startTime: '20:00 30/06/2025', endTime: '22:00 30/06/2025', note: 'Tiktok', mainHost: 'tƒÉng ho√†ng H√†', assistant: '19 20', roomName: 'PH1' },
];



// ‚úÖ G·ªçi h√†m ch√≠nh
(async () => {
  const driver = await loginToWebsite('hoangboytq@gmail.com', 'MxRKPGFhKj@5BXZ');
  if (driver) {
    for (const session of sessionList) {
      await createSessionInNewTab(driver, session);
      await driver.sleep(1000);
    }
    console.log('üéâ T·∫°o xong to√†n b·ªô phi√™n.');
  }
})();
